"use strict";var parking=angular.module("parking",["ui.router","common.module","login.module","ngCookies","ngDialog"]).config(["$urlRouterProvider","$stateProvider",function(t,e){t.otherwise("/"),e.state("home",{templateUrl:"views/home/home.html",url:"/"})}]),common=angular.module("common.module",[]);common.directive("parkingCounter",function(){return{restrict:"E",templateUrl:"views/common/parking-counter.html",controller:"parkingCounterCtrl",controllerAs:"counter",replace:!0}}),common.directive("tableFilter",function(){return{restrict:"E",templateUrl:"views/common/table-filter.html",controller:"tableFilterCtrl",controllerAs:"filter",replace:!0}}),common.controller("addNewModal",["$scope","$log","$timeout","SlotsFactory","ngDialog",function(t,e,o,n,r){var i;this.spots=n.spots,t.saveNew=angular.bind(this,function(){i={name:t.name,plate:t.plate,type:t.type},n.createUser(i),r.closeAll()})}]),common.controller("tableFilterCtrl",function(){}),common.service("SpotsService",["$http","$q",function(){}]),common.factory("SlotsFactory",["$http","$q","$log","$timeout",function(t,e,o){var n={},r="/spots",i=0;return n.spots=[],n.init=function(){this.getData(r).then(angular.bind(this,function(t){for(var e in t)t[e].plate=n.normalizePlate(t[e].plate);n.spots=t,n.setAvailableSlots()}))},n.setAvailableSlots=function(){for(var t=n.spots.length,e=0,o=0;t>o;o++)e+=n.spots[o].active?1:0;10>=e&&(i=e)},n.getAvailableSlots=function(){return i},n.assignSlot=function(t){var e;t=n.normalizePlate(t);for(var o=0;o<n.spots.length;o++)e=n.normalizePlate(n.spots[o].plate),t==e&&(n.spots[o].active=n.spots[o].active?!1:!0,n.setAvailableSlots())},n.normalizePlate=function(t){return t.match(/[A-Za-z0-9]/gi).join("").toUpperCase()},n.createUser=function(t){if("object"!=typeof n.searchPlate(t.plate)){var e={active:!1,type:t.type.toLowerCase(),plate:n.normalizePlate(t.plate),name:t.name};n.spots.push(e)}},n.searchPlate=function(t){t=n.normalizePlate(t);for(var e in n.spots){var r=n.normalizePlate(n.spots[e].plate);if(o.info(r,t),r===t)return{position:e}}return!1},n.getData=function(){var o=e.defer();return t.get(r).success(function(t){o.resolve(t)}).error(function(){o.reject()}),o.promise},n}]),common.directive("parkingSlot",function(){return{restrict:"E",templateUrl:"views/common/parking-slot.html",controller:"parkingSlotCtrl",controllerAs:"slots",replace:!0}}),common.controller("parkingSlotCtrl",["SpotsService","SlotsFactory","$log","$scope","ngDialog",function(t,e,o,n,r){this.spots={},e.init(),n.$watch(function(){return e.spots},angular.bind(this,function(t){this.spots=t})),this.assignSlot=function(t){e.assignSlot(t),this.spots=e.spots},n.edit=function(t){var o=e.searchPlate(t);""!=o.position?r.open({template:"views/common/new-vehicle-modal.html",className:"modal-container",controller:"addNewModal",scope:n}):alert("user not found!"),console.info(o)}}]),common.controller("addNewCtrl",["$scope","$log","ngDialog","SlotsFactory",function(t,e,o){t.addNew=function(){o.open({template:"views/common/new-vehicle-modal.html",className:"modal-container",controller:"addNewModal"})}}]),common.controller("parkingCounterCtrl",["SlotsFactory","$scope",function(t,e){this.available=t.getAvailableSlots(),e.$watch(t.getAvailableSlots,angular.bind(this,function(t){this.available=t}))}]),common.directive("newVehicle",function(){return{restrict:"E",templateUrl:"views/common/new-vehicle.html",controller:"addNewCtrl",controllerAs:"new",replace:!0}}),common.factory("SlotsFactory",["$http","$q","$log","$timeout",function(t,e){var o={},n="/spots",r=0;return o.spots=[],o.init=function(){this.getData(n).then(angular.bind(this,function(t){for(var e in t)t[e].plate=o.normalizePlate(t[e].plate);o.spots=t,o.setAvailableSlots()}))},o.setAvailableSlots=function(){for(var t=o.spots.length,e=0,n=0;t>n;n++)e+=o.spots[n].active?1:0;r=e},o.getAvailableSlots=function(){return r},o.assignSlot=function(t){var e;t=o.normalizePlate(t);for(var n=0;n<o.spots.length;n++)e=o.normalizePlate(o.spots[n].plate),t==e&&(o.spots[n].active=o.spots[n].active?!1:!0,o.setAvailableSlots())},o.normalizePlate=function(t){return t.match(/[A-Za-z0-9]/gi).join("").toUpperCase()},o.createUser=function(t){if("object"!=typeof o.searchPlate(t.plate)){var e={active:!1,type:t.type.toLowerCase(),plate:o.normalizePlate(t.plate),name:t.name};o.setData(e).then(angular.bind(this,function(t){o.spots.push(e),console.log(t)}),function(){alert("save fail!!!")})}},o.searchPlate=function(t){t=o.normalizePlate(t);for(var e in o.spots){var n=o.normalizePlate(o.spots[e].plate);if(n===t)return{position:e}}return!1},o.getData=function(){var o=e.defer();return t.get(n).success(function(t){o.resolve(t)}).error(function(){o.reject()}),o.promise},o.setData=function(o){var r=e.defer();return t.post(n,o).success(function(t){r.resolve(t)}).error(function(){r.reject()}),r.promise},o.editData=function(o){var r=e.defer();return t.put(n,o).success(function(t){r.resolve(t)}).error(function(){r.reject()}),r.promise},o}]);var login=angular.module("login.module",["ngCookies"]);login.config(["$stateProvider",function(t){t.state("login",{controllerAs:"login",controller:"loginCtrl",templateUrl:"views/login/login.html",url:"/login"})}]),login.service("LoginService",["$state","$cookieStore",function(t,e){this.login=function(){return e.put("session","parking user session"),!0},this.isLogged=function(){var t=e.get("session");return t?!0:!1},this.logout=function(){var o=!0;o?(e.remove("session"),t.go("home")):$log.error("The user doesn't wanna go...")}}]),login.controller("loginCtrl",["$state","LoginService",function(t,e){this.user={},this.methods={},this.errors={},this.errors.login=!1,this.methods.submit=angular.bind(this,function(){e.login()?(this.errors.login=!1,t.go("home")):this.errors.login=!0})}]),parking.controller("navCtrl",["LoginService","$cookies",function(t,e){this.methods={},this.$cookies=e,this.LoginService=t,this.methods.logout=function(){t.logout()}}]);
//# sourceMappingURL=data:application/json;base64,