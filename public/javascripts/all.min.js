"use strict";var parking=angular.module("parking",["ui.router","common.module","login.module","ngCookies","ngDialog"]).config(["$urlRouterProvider","$stateProvider",function(t,o){t.otherwise("/"),o.state("home",{templateUrl:"views/home/home.html",url:"/"})}]),common=angular.module("common.module",[]);common.directive("parkingCounter",function(){return{restrict:"E",templateUrl:"views/common/parking-counter.html",controller:"parkingCounterCtrl",controllerAs:"counter",replace:!0}}),common.directive("tableFilter",function(){return{restrict:"E",templateUrl:"views/common/table-filter.html",controller:"tableFilterCtrl",controllerAs:"filter",replace:!0}}),common.controller("addNewModal",["$scope","$log","$timeout","SlotsFactory","ngDialog",function(t,o,e,n,r){var i;this.spots=n.spots,t.saveNew=angular.bind(this,function(){i={name:t.name,plate:t.plate,type:t.type},n.createUser(i),r.closeAll()})}]),common.controller("tableFilterCtrl",function(){}),common.service("SpotsService",["$http","$q",function(){}]),common.factory("SlotsFactory",["$http","$q","$log","$timeout",function(t,o,e){var n={},r="/spots",i=0;return n.spots=[],n.init=function(){this.getData(r).then(angular.bind(this,function(t){for(var o in t)t[o].plate=n.normalizePlate(t[o].plate);n.spots=t,n.setAvailableSlots()}))},n.setAvailableSlots=function(){for(var t=n.spots.length,o=0,e=0;t>e;e++)o+=n.spots[e].active?1:0;10>=o&&(i=o)},n.getAvailableSlots=function(){return i},n.assignSlot=function(t){var o;t=n.normalizePlate(t);for(var e=0;e<n.spots.length;e++)o=n.normalizePlate(n.spots[e].plate),t==o&&(n.spots[e].active=n.spots[e].active?!1:!0,n.setAvailableSlots())},n.normalizePlate=function(t){return t.match(/[A-Za-z0-9]/gi).join("").toUpperCase()},n.createUser=function(t){if("object"!=typeof n.searchPlate(t.plate)){var o={active:!1,type:t.type.toLowerCase(),plate:n.normalizePlate(t.plate),name:t.name};n.spots.push(o)}},n.searchPlate=function(t){t=n.normalizePlate(t);for(var o in n.spots){var r=n.normalizePlate(n.spots[o].plate);if(e.info(r,t),r===t)return{position:o}}return!1},n.getData=function(){var e=o.defer();return t.get(r).success(function(t){e.resolve(t)}).error(function(){e.reject()}),e.promise},n}]),common.directive("parkingSlot",function(){return{restrict:"E",templateUrl:"views/common/parking-slot.html",controller:"parkingSlotCtrl",controllerAs:"slots",replace:!0}}),common.controller("parkingSlotCtrl",["SpotsService","SlotsFactory","$log","$scope",function(t,o,e,n){this.spots={},o.init(),n.$watch(function(){return o.spots},angular.bind(this,function(t){this.spots=t})),this.assignSlot=function(t){o.assignSlot(t),this.spots=o.spots}}]),common.controller("addNewCtrl",["$scope","$log","ngDialog","SlotsFactory",function(t,o,e){t.addNew=function(){e.open({template:"views/common/new-vehicle-modal.html",className:"modal-container",controller:"addNewModal"})}}]),common.controller("parkingCounterCtrl",["SlotsFactory","$scope",function(t,o){this.available=t.getAvailableSlots(),o.$watch(t.getAvailableSlots,angular.bind(this,function(t){this.available=t}))}]),common.directive("newVehicle",function(){return{restrict:"E",templateUrl:"views/common/new-vehicle.html",controller:"addNewCtrl",controllerAs:"new",replace:!0}}),common.factory("SlotsFactory",["$http","$q","$log","$timeout",function(t,o,e){var n={},r="/spots",i=0;return n.spots=[],n.init=function(){this.getData(r).then(angular.bind(this,function(t){for(var o in t)t[o].plate=n.normalizePlate(t[o].plate);n.spots=t,n.setAvailableSlots()}))},n.setAvailableSlots=function(){for(var t=n.spots.length,o=0,e=0;t>e;e++)o+=n.spots[e].active?1:0;i=o},n.getAvailableSlots=function(){return i},n.assignSlot=function(t){var o;t=n.normalizePlate(t);for(var e=0;e<n.spots.length;e++)o=n.normalizePlate(n.spots[e].plate),t==o&&(n.spots[e].active=n.spots[e].active?!1:!0,n.setAvailableSlots())},n.normalizePlate=function(t){return t.match(/[A-Za-z0-9]/gi).join("").toUpperCase()},n.createUser=function(t){if("object"!=typeof n.searchPlate(t.plate)){var o={active:!1,type:t.type.toLowerCase(),plate:n.normalizePlate(t.plate),name:t.name};n.spots.push(o)}},n.searchPlate=function(t){t=n.normalizePlate(t);for(var o in n.spots){var r=n.normalizePlate(n.spots[o].plate);if(e.info(r,t),r===t)return{position:o}}return!1},n.getData=function(){var e=o.defer();return t.get(r).success(function(t){e.resolve(t)}).error(function(){e.reject()}),e.promise},n}]);var login=angular.module("login.module",["ngCookies"]);login.config(["$stateProvider",function(t){t.state("login",{controllerAs:"login",controller:"loginCtrl",templateUrl:"views/login/login.html",url:"/login"})}]),login.service("LoginService",["$state","$cookieStore",function(t,o){this.login=function(){return o.put("session","parking user session"),!0},this.isLogged=function(){var t=o.get("session");return t?!0:!1},this.logout=function(){var e=!0;e?(o.remove("session"),t.go("home")):$log.error("The user doesn't wanna go...")}}]),login.controller("loginCtrl",["$state","LoginService",function(t,o){this.user={},this.methods={},this.errors={},this.errors.login=!1,this.methods.submit=angular.bind(this,function(){o.login()?(this.errors.login=!1,t.go("home")):this.errors.login=!0})}]),parking.controller("navCtrl",["LoginService","$cookies",function(t,o){this.methods={},this.$cookies=o,this.LoginService=t,this.methods.logout=function(){t.logout()}}]);
//# sourceMappingURL=data:application/json;base64,